name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Python テスト
  test-python:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v3
    
    - name: Python セットアップ
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 依存関係インストール
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Lint (flake8)
      run: |
        flake8 python/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 python/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: テスト実行
      run: |
        pytest tests/python/ --cov=python/ --cov-report=xml
    
    - name: カバレッジアップロード
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  # Node.js テスト
  test-nodejs:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]

    steps:
    - uses: actions/checkout@v3
    
    - name: Node.js セットアップ
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: 依存関係インストール
      run: npm ci
    
    - name: Lint (ESLint)
      run: npm run lint
    
    - name: テスト実行
      run: npm test

  # セキュリティチェック
  security-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Python セキュリティチェック
      run: |
        pip install safety
        safety check -r requirements.txt
    
    - name: Node.js セキュリティチェック
      run: |
        npm audit --audit-level moderate

  # Docker ビルド
  docker-build:
    runs-on: ubuntu-latest
    needs: [test-python, test-nodejs]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Docker Buildx セットアップ
      uses: docker/setup-buildx-action@v2
    
    - name: Docker イメージビルド
      run: |
        docker build -f config/Dockerfile -t agent-development:latest .
    
    - name: Docker イメージテスト
      run: |
        docker run --rm agent-development:latest --version

  # デプロイ (main ブランチのみ)
  deploy:
    runs-on: ubuntu-latest
    needs: [test-python, test-nodejs, security-check, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: デプロイ実行
      run: |
        echo "本番環境へのデプロイを実行します"
        # ここに実際のデプロイコマンドを記述