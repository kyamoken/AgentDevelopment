services:
  postgres:
    image: postgres:15-alpine
    container_name: chatapp_postgres_prod
    environment:
      POSTGRES_DB: realtime_chat
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - chatapp_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d realtime_chat"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: chatapp_backend_prod
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: realtime_chat
      DB_USERNAME: postgres
      DB_PASSWORD: ${DB_PASSWORD:-password}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 24h
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - chatapp_network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    container_name: chatapp_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
    networks:
      - chatapp_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  chatapp_network:
    driver: bridge